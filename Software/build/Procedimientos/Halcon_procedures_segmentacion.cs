//
// File generated by HDevelop for HALCON/.NET (C#) Version 12.0.3
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
#endif

  // Procedures 
  // Short Description: Detect a fin 
  public void RC_optimar_contorno_imagen_sinfondo (HObject ho_ImagenEntradaRGB, HObject ho_ImagenEntradaNIR, 
      out HObject ho_Mascara, out HObject ho_Contorno, out HObject ho_ImagenSinFondoRGB, 
      out HObject ho_ImagenSinFondoNIR, HTuple hv_SinFondo, out HTuple hv_iniPez, 
      out HTuple hv_finPez, out HTuple hv_Largo, out HTuple hv_Ancho, out HTuple hv_Area, 
      out HTuple hv_Fila1, out HTuple hv_Fila2)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_ImagenNIR=null, ho_ImagenRGB=null;
    HObject ho_pezregion=null, ho_ContornoSuavizado=null, ho_MascaraSuavizada=null;
    HObject ho_Mascarabin=null, ho_Region1=null;

    // Local control variables 

    HTuple hv_Width = new HTuple(), hv_Height = new HTuple();
    HTuple hv_numContornos = new HTuple(), hv_Column1 = new HTuple();
    HTuple hv_Column2 = new HTuple(), hv_Row = new HTuple();
    HTuple hv_Column = new HTuple(), hv_Row3 = new HTuple();
    HTuple hv_Column3 = new HTuple(), hv_Phi = new HTuple();
    HTuple hv_Length1 = new HTuple(), hv_Length2 = new HTuple();
    HTuple hv_Row1 = new HTuple(), hv_Row2 = new HTuple();
    HTuple hv_margen = new HTuple(), hv_Exception = null;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Mascara);
    HOperatorSet.GenEmptyObj(out ho_Contorno);
    HOperatorSet.GenEmptyObj(out ho_ImagenSinFondoRGB);
    HOperatorSet.GenEmptyObj(out ho_ImagenSinFondoNIR);
    HOperatorSet.GenEmptyObj(out ho_ImagenNIR);
    HOperatorSet.GenEmptyObj(out ho_ImagenRGB);
    HOperatorSet.GenEmptyObj(out ho_pezregion);
    HOperatorSet.GenEmptyObj(out ho_ContornoSuavizado);
    HOperatorSet.GenEmptyObj(out ho_MascaraSuavizada);
    HOperatorSet.GenEmptyObj(out ho_Mascarabin);
    HOperatorSet.GenEmptyObj(out ho_Region1);
    hv_iniPez = new HTuple();
    hv_finPez = new HTuple();
    hv_Largo = new HTuple();
    hv_Ancho = new HTuple();
    hv_Area = new HTuple();
    hv_Fila1 = new HTuple();
    hv_Fila2 = new HTuple();
    try
    {
      //  Parámetros de entrada:
      //    - ImagenEntrada
      //
      //  Parámetros de salida:
      //    - Mascara
      //    - Contorno
      //    - ContornoSuavizado
      //    - MascaraFilaMin
      //    - MascaraFilaMax
      //    - ImagenSinFondo

      try
      {

        ho_ImagenNIR.Dispose();
        ho_ImagenNIR = ho_ImagenEntradaNIR.CopyObj(1,-1);
        ho_ImagenRGB.Dispose();
        ho_ImagenRGB = ho_ImagenEntradaRGB.CopyObj(1,-1);

        hv_Largo = 0;
        hv_Ancho = 0;
        hv_iniPez = 0;
        hv_finPez = 0;
        ho_ImagenSinFondoRGB.Dispose();
        HOperatorSet.GenEmptyObj(out ho_ImagenSinFondoRGB);
        ho_ImagenSinFondoNIR.Dispose();
        HOperatorSet.GenEmptyObj(out ho_ImagenSinFondoNIR);

        //Ancho y largo de la imagen
        HOperatorSet.GetImageSize(ho_ImagenEntradaRGB, out hv_Width, out hv_Height);

        ho_pezregion.Dispose();
        HOperatorSet.Threshold(ho_ImagenNIR, out ho_pezregion, 1, 255);



        //sacar contorno
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.Connection(ho_pezregion, out ExpTmpOutVar_0);
        ho_pezregion.Dispose();
        ho_pezregion = ExpTmpOutVar_0;
        }
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.SelectShapeStd(ho_pezregion, out ExpTmpOutVar_0, "max_area", 
            100);
        ho_pezregion.Dispose();
        ho_pezregion = ExpTmpOutVar_0;
        }
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ErosionCircle(ho_pezregion, out ExpTmpOutVar_0, 1.5);
        ho_pezregion.Dispose();
        ho_pezregion = ExpTmpOutVar_0;
        }
        ho_Contorno.Dispose();
        HOperatorSet.GenContourRegionXld(ho_pezregion, out ho_Contorno, "border");
        ho_ContornoSuavizado.Dispose();
        HOperatorSet.SmoothContoursXld(ho_Contorno, out ho_ContornoSuavizado, 69);
        ho_MascaraSuavizada.Dispose();
        HOperatorSet.GenRegionContourXld(ho_ContornoSuavizado, out ho_MascaraSuavizada, 
            "filled");

        //selecciono el de mayor area
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.SelectShapeStd(ho_MascaraSuavizada, out ExpTmpOutVar_0, "max_area", 
            100);
        ho_MascaraSuavizada.Dispose();
        ho_MascaraSuavizada = ExpTmpOutVar_0;
        }

        ho_Contorno.Dispose();
        ho_Contorno = ho_ContornoSuavizado.CopyObj(1,-1);
        ho_Mascara.Dispose();
        ho_Mascara = ho_MascaraSuavizada.CopyObj(1,-1);

        //mirar si hay pez
        HOperatorSet.GetImageSize(ho_ImagenEntradaRGB, out hv_Width, out hv_Height);

        //ver si sólo hay un contorno
        HOperatorSet.CountObj(ho_Contorno, out hv_numContornos);
        HOperatorSet.SmallestRectangle1(ho_Mascara, out hv_Fila1, out hv_Column1, 
            out hv_Fila2, out hv_Column2);
        hv_iniPez = 0;
        if ((int)(new HTuple(hv_Fila2.TupleLess(hv_Height-20))) != 0)
        {
          hv_iniPez = 1;
        }

        hv_finPez = 0;
        if ((int)(new HTuple(hv_Fila1.TupleGreater(20))) != 0)
        {
          hv_finPez = 1;
        }

        HOperatorSet.AreaCenter(ho_Mascara, out hv_Area, out hv_Row, out hv_Column);
        HOperatorSet.SmallestRectangle2(ho_Mascara, out hv_Row3, out hv_Column3, 
            out hv_Phi, out hv_Length1, out hv_Length2);
        hv_Largo = hv_Length1*2;
        hv_Ancho = hv_Length2*2;
        ho_Mascarabin.Dispose();
        HOperatorSet.RegionToBin(ho_Mascara, out ho_Mascarabin, 255, 0, hv_Width, 
            hv_Height);
        //Imagen Sin Fondo

        HOperatorSet.SmallestRectangle1(ho_Mascara, out hv_Row1, out hv_Column1, 
            out hv_Row2, out hv_Column2);
        ho_ImagenSinFondoRGB.Dispose();
        HOperatorSet.ReduceDomain(ho_ImagenRGB, ho_Mascara, out ho_ImagenSinFondoRGB
            );
        ho_ImagenSinFondoNIR.Dispose();
        HOperatorSet.ReduceDomain(ho_ImagenNIR, ho_Mascara, out ho_ImagenSinFondoNIR
            );
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_Mascarabin, ho_Mascara, out ExpTmpOutVar_0);
        ho_Mascarabin.Dispose();
        ho_Mascarabin = ExpTmpOutVar_0;
        }
        hv_margen = 0;
        if ((int)(new HTuple(hv_SinFondo.TupleEqual(1))) != 0)
        {
          {
          HObject ExpTmpOutVar_0;
          HOperatorSet.CropRectangle1(ho_ImagenSinFondoRGB, out ExpTmpOutVar_0, hv_Row1-hv_margen, 
              hv_Column1-hv_margen, hv_Row2+hv_margen, hv_Column2+hv_margen);
          ho_ImagenSinFondoRGB.Dispose();
          ho_ImagenSinFondoRGB = ExpTmpOutVar_0;
          }
          {
          HObject ExpTmpOutVar_0;
          HOperatorSet.CropRectangle1(ho_ImagenSinFondoNIR, out ExpTmpOutVar_0, hv_Row1-hv_margen, 
              hv_Column1-hv_margen, hv_Row2+hv_margen, hv_Column2+hv_margen);
          ho_ImagenSinFondoNIR.Dispose();
          ho_ImagenSinFondoNIR = ExpTmpOutVar_0;
          }
          {
          HObject ExpTmpOutVar_0;
          HOperatorSet.CropRectangle1(ho_Mascarabin, out ExpTmpOutVar_0, hv_Row1-hv_margen, 
              hv_Column1-hv_margen, hv_Row2+hv_margen, hv_Column2+hv_margen);
          ho_Mascarabin.Dispose();
          ho_Mascarabin = ExpTmpOutVar_0;
          }

          ho_Region1.Dispose();
          HOperatorSet.Threshold(ho_Mascarabin, out ho_Region1, 128, 255);
          {
          HObject ExpTmpOutVar_0;
          HOperatorSet.ReduceDomain(ho_ImagenSinFondoRGB, ho_Region1, out ExpTmpOutVar_0
              );
          ho_ImagenSinFondoRGB.Dispose();
          ho_ImagenSinFondoRGB = ExpTmpOutVar_0;
          }
          {
          HObject ExpTmpOutVar_0;
          HOperatorSet.ReduceDomain(ho_ImagenSinFondoNIR, ho_Region1, out ExpTmpOutVar_0
              );
          ho_ImagenSinFondoNIR.Dispose();
          ho_ImagenSinFondoNIR = ExpTmpOutVar_0;
          }
          ho_Mascara.Dispose();
          ho_Mascara = ho_Region1.CopyObj(1,-1);

        }



      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        //No hay imagen
      }


      ho_ImagenNIR.Dispose();
      ho_ImagenRGB.Dispose();
      ho_pezregion.Dispose();
      ho_ContornoSuavizado.Dispose();
      ho_MascaraSuavizada.Dispose();
      ho_Mascarabin.Dispose();
      ho_Region1.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ImagenNIR.Dispose();
      ho_ImagenRGB.Dispose();
      ho_pezregion.Dispose();
      ho_ContornoSuavizado.Dispose();
      ho_MascaraSuavizada.Dispose();
      ho_Mascarabin.Dispose();
      ho_Region1.Dispose();

      throw HDevExpDefaultException;
    }
  }

  


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

